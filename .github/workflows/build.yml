name: build

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Figure out if this is a tag build or a main push, and set VERSION accordingly
      - name: Determine version
        shell: bash
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Stable from tag
            VER="${GITHUB_REF#refs/tags/v}"
            echo "IS_TAG=true" >> $GITHUB_ENV
            echo "VERSION=$VER" >> $GITHUB_ENV
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            # Prerelease from main
            BASE="1.0.4"   # <-- bump when you start the next prerelease train
            DATE=$(date -u +%Y%m%dT%H%M)
            SHA=$(git rev-parse --short "$GITHUB_SHA")
            echo "IS_MAIN=true" >> $GITHUB_ENV
            echo "VERSION=${BASE}-pre.${DATE}.${SHA}" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION"

      # Use existing solution if present; otherwise create and add projects
      - name: Create or reuse solution
        shell: bash
        run: |
          SOL=ConduitR.sln
          if [ -f "$SOL" ]; then
            echo "Using existing $SOL"
          else
            dotnet new sln -n ConduitR
            SOL=ConduitR.sln
          fi
          mapfile -t PROJS < <(find src samples tests -type f -name "*.csproj" | sort)
          dotnet sln "$SOL" list || true
          for p in "${PROJS[@]}"; do
            if dotnet sln "$SOL" list | grep -Fq "$p"; then
              echo "Already in solution: $p"
            else
              dotnet sln "$SOL" add "$p"
            fi
          done

      - name: Restore
        run: dotnet restore ConduitR.sln

      - name: Build
        run: dotnet build -c Release ConduitR.sln --no-restore

      - name: Test
        run: dotnet test -c Release ConduitR.sln --no-build --verbosity normal

      # Pack everything (both prerelease and stable use $VERSION)
      - name: Pack all projects
        run: |
          dotnet pack src/ConduitR.Abstractions/ConduitR.Abstractions.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          dotnet pack src/ConduitR/ConduitR.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          dotnet pack src/ConduitR.DependencyInjection/ConduitR.DependencyInjection.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          dotnet pack src/ConduitR.Processing/ConduitR.Processing.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          # include add-ons if present in your repo
          if [ -f src/ConduitR.Validation.FluentValidation/ConduitR.Validation.FluentValidation.csproj ]; then
            dotnet pack src/ConduitR.Validation.FluentValidation/ConduitR.Validation.FluentValidation.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          fi
          if [ -f src/ConduitR.AspNetCore/ConduitR.AspNetCore.csproj ]; then
            dotnet pack src/ConduitR.AspNetCore/ConduitR.AspNetCore.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          fi
          if [ -f src/ConduitR.Resilience.Polly/ConduitR.Resilience.Polly.csproj ]; then
            dotnet pack src/ConduitR.Resilience.Polly/ConduitR.Resilience.Polly.csproj -c Release -o artifacts -p:PackageVersion=${VERSION} -p:ContinuousIntegrationBuild=true
          fi

      - name: Publish to NuGet
        if: env.IS_TAG == 'true' || env.IS_MAIN == 'true'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push artifacts/*.nupkg -k "$NUGET_API_KEY" -s https://api.nuget.org/v3/index.json --skip-duplicate
